"""empty message

Revision ID: cf65e3c1a6c5
Revises: 894aa7756f5b
Create Date: 2018-05-30 12:28:09.858408

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cf65e3c1a6c5'
down_revision = '894aa7756f5b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('names', sa.Column('designation', sa.String(length=50), nullable=True))
    op.add_column('requests', sa.Column('expiration_date', sa.DateTime(), nullable=True))
    op.add_column('requests', sa.Column('previous_request_id', sa.Integer(), nullable=True))
    op.add_column('requests', sa.Column('submit_count', sa.Integer(), nullable=True))
    op.add_column('requests', sa.Column('submitted_date', sa.DateTime(), nullable=True))
    op.add_column('requests', sa.Column('submitter_userid', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'requests', 'users', ['submitter_userid'], ['id'])
    op.drop_column('requests', 'expiry_date')
    op.drop_column('requests', 'sk_partner')
    op.drop_column('requests', 'phone_number')
    op.drop_column('requests', 'contact')
    op.drop_column('requests', 'user_note')
    op.drop_column('requests', 'tilma_transaction_id')
    op.drop_column('requests', 'nuans_expiration_date')
    op.drop_column('requests', 'applicant')
    op.drop_column('requests', 'assumed_nuans_num')
    op.drop_column('requests', 'assumed_nuans_expiration_date')
    op.drop_column('requests', 'last_nuans_update_role')
    op.drop_column('requests', 'ab_partner')
    op.drop_column('requests', 'timestamp')
    op.drop_column('requests', 'assumed_nuans_name')
    op.drop_column('requests', 'exam_comment')
    op.drop_column('requests', 'nuans_num')
    op.drop_column('requests', 'tilma_ind')
    op.drop_column('requests', 'admin_comment')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('requests', sa.Column('admin_comment', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('tilma_ind', sa.VARCHAR(length=1), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('nuans_num', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('exam_comment', sa.VARCHAR(length=4000), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('assumed_nuans_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('ab_partner', sa.VARCHAR(length=4000), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('last_nuans_update_role', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('assumed_nuans_expiration_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('assumed_nuans_num', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('applicant', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('nuans_expiration_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('tilma_transaction_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('user_note', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('contact', sa.VARCHAR(length=150), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('phone_number', sa.VARCHAR(length=30), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('sk_partner', sa.VARCHAR(length=4000), autoincrement=False, nullable=True))
    op.add_column('requests', sa.Column('expiry_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'requests', type_='foreignkey')
    op.drop_column('requests', 'submitter_userid')
    op.drop_column('requests', 'submitted_date')
    op.drop_column('requests', 'submit_count')
    op.drop_column('requests', 'previous_request_id')
    op.drop_column('requests', 'expiration_date')
    op.drop_column('names', 'designation')
    op.create_table('nro_names_sync_job_status',
    sa.Column('status_cd', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('status_desc', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('status_cd', name='nro_names_sync_job_status_pkey'),
    postgresql_ignore_search_path=False
    )
    # ### end Alembic commands ###
