#!/usr/bin/env groovy
// Copyright Â© 2018 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

//JENKINS DEPLOY ENVIRONMENT VARIABLES:
// - JENKINS_JAVA_OVERRIDES  -Dhudson.model.DirectoryBrowserSupport.CSP= -Duser.timezone=America/Vancouver
//   -> user.timezone : set the local timezone so logfiles report correxct time
//   -> hudson.model.DirectoryBrowserSupport.CSP : removes restrictions on CSS file load, thus html pages of test reports are displayed pretty
//   See: https://docs.openshift.com/container-platform/3.9/using_images/other_images/jenkins.html for a complete list of JENKINS env vars

// define constants
def BUILDCFG_BASE ='namex-api-base'
def IMAGE_BASE_NAME = 'namex-api-base'

def BUILDCFG_RUNTIME ='namex-api-runtime'
def IMAGE_RUNTIME_NAME = 'namex-api-runtime'

def DEV_DEPLOYMENT_NAME = 'namex-api'
def DEV_TAG_NAME = 'dev'
def DEV_NS = 'servicebc-ne-dev'

def TST_DEPLOYMENT_NAME = 'namex-api'
def TST_TAG_NAME = 'test'
def TST_BCK_TAG_NAME = 'test-previous'
def TST_NS = 'servicebc-ne-test'

def PROD_DEPLOYMENT_NAME = 'namex-api'
def PROD_TAG_NAME = 'prod'
def PROD_BCK_TAG_NAME = 'prod-previous'
def PROD_NS = 'servicebc-ne-prod'

// Edit your application's context directory here
def CONTEXT_DIRECTORY = 'api'

def GIT_BRANCH_NAME = ("${env.JOB_BASE_NAME}".contains("master")) ? "master" : "develop"
def JENKINS_ICO = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
def OPENSHIFT_ICO = 'https://commons.wikimedia.org/wiki/File:OpenShift-LogoType.svg'

// define groovy functions
import groovy.json.JsonOutput

// send a msg to slack channel that deploy occured
def notifySlack(text, channel, url, attachments) {
    def slackURL = url
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "Jenkins",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])
    def encodedReq = URLEncoder.encode(payload, "UTF-8")
    sh("curl -s -S -X POST " +
            "--data \'payload=${encodedReq}\' ${slackURL}")    
}

// create a string listing commit msgs occurred since last build
@NonCPS
String getChangeString(String contextDirectory) {
  MAX_MSG_LEN = 512
  def changeString = ""
  def changeLogSets = currentBuild.changeSets
  for (int i = 0; i < changeLogSets.size(); i++) {
     def entries = changeLogSets[i].items
     for (int j = 0; j < entries.length; j++) {
         def entry = entries[j]
         def files = new ArrayList(entry.affectedFiles)
         for (int k = 0; k < files.size(); k++) {
            def file = files[k]
            def filePath = file.path
            //echo ">> ${file.path}"
            if (filePath.contains(contextDirectory)) {
              k = files.size()
              truncated_msg = entry.msg.take(MAX_MSG_LEN)
              changeString += " - ${truncated_msg} [${entry.author}]\n"
            }
         }
     }
  }
  if (!changeString) {
     changeString = "No changes"
  }
  return changeString
}

// Determine whether there were any changes the files within the project's context directory.
@NonCPS
boolean triggerBuild(String contextDirectory) {
  // Determine if code has changed within the source context directory.
  def changeLogSets = currentBuild.changeSets
  def filesChangeCnt = 0
  for (int i = 0; i < changeLogSets.size(); i++) {
    def entries = changeLogSets[i].items
    for (int j = 0; j < entries.length; j++) {
      def entry = entries[j]
      //echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
      def files = new ArrayList(entry.affectedFiles)
      for (int k = 0; k < files.size(); k++) {
        def file = files[k]
        def filePath = file.path
        //echo ">> ${file.path}"
        if (filePath.contains(contextDirectory)) {
          filesChangeCnt = 1
          k = files.size()
          j = entries.length
        }
      }
    }
  }

  if ( filesChangeCnt < 1 ) {
    echo('The changes do not require a build.')
    return false
  }
  else {
    echo('The changes require a build.')
    return true
  }
}

// pipeline

// Note: openshiftVerifyDeploy requires policy to be added:
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-dev
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-test
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-prod

// define job properties - keep 10 builds only
properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']]])

node {

    SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                returnStdout: true).trim()
    if (triggerBuild(CONTEXT_DIRECTORY)) {
        // Part 1 - CI - Source code scanning, build, dev deploy
                stage('checkout') {
                    echo "checking out source"
                    echo "Build: ${BUILD_ID}"
                    checkout scm
                    GIT_COMMIT_SHORT_HASH = sh (
                        script: """git describe --always""", returnStdout: true
                        ).trim()
                    GIT_COMMIT_AUTHOR = sh (
                        script: """git show -s --pretty=%an""", returnStdout: true
                        ).trim()

                }

                stage('Dev deploy') {
                    echo ">>> Tag ${IMAGE_HASH} with ${DEV_TAG_NAME}"
                    openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: DEV_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: "${IMAGE_HASH}"
                        sleep 10
                    openshiftVerifyDeployment depCfg: DEV_DEPLOYMENT_NAME, namespace: DEV_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                    echo ">>>> Deployment Complete"

                    // send msg to slack
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API successfully deployed to DEV :rocket:"
                    attachment.color = "#00FF00" // Lime Green
                    notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }
        // Part 2 - Integration Testing API

        stage('API Test DEV') {
            //every time a change is made in pod template the name must be changed too
            podTemplate(label: 'nodejs-python3nodejs3.1', name: 'nodejs-python3nodejs3.1', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
            containerTemplate(
                name: 'jnlp',
                image: '172.50.0.2:5000/openshift/jenkins-slave-python3nodejs',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '1Gi',
                resourceLimitMemory: '2Gi',
                workingDir: '/tmp',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}',
                envVars: [
                    envVar(key:'BASEURL', value: "https://namex-dev.pathfinder.gov.bc.ca"),
                    secretEnvVar(key: 'DEV_API_TEST_USER', secretName: 'apitest-secrets-dev', secretKey: 'username'),
                    secretEnvVar(key: 'DEV_API_TEST_PASSWORD', secretName: 'apitest-secrets-dev', secretKey: 'password'),
                    secretEnvVar(key: 'DEV_API_TEST_AUTH_SERVER', secretName: 'apitest-secrets-dev', secretKey: 'authurl'),
                    secretEnvVar(key: 'DEV_API_TEST_CLIENT_ID', secretName: 'apitest-secrets-dev', secretKey: 'clientid'),
                    secretEnvVar(key: 'DEV_API_TEST_CLIENT_SECRET', secretName: 'apitest-secrets-dev', secretKey: 'client_secret'),
                    secretEnvVar(key: 'DEV_API_TEST_NR', secretName: 'apitest-secrets-dev', secretKey: 'test_nr')
                ]
              )
            ])
            {
                node('nodejs-python3nodejs3.1') {
                    //the checkout is mandatory, otherwise functional test would fail
                        echo "checking out source"
                        echo "Build: ${BUILD_ID}"
                        sh '''#!/bin/bash
                            echo BASEURL=$BASEURL
                            echo DEV_API_TEST_USER = $DEV_API_TEST_USER
                            echo DEV_API_TEST_CLIENT_ID = $DEV_API_TEST_CLIENT_ID
                            echo DEV_API_TEST_AUTH_SERVER = $DEV_API_TEST_AUTH_SERVER
                            echo DEV_API_TEST_NR = $DEV_API_TEST_NR
                        '''
                        //input(message: "Verify Environment variables. Continue?")
                        checkout scm
                        dir('api') {
                            try {
                                sh '''
                                    pip install pip --upgrade
                                    pip install setuptools --upgrade
                                    pip install python-dotenv==0.8.2
                                    pip install pytest-mock
                                    python setup.py test
                                '''
                                def attachment = [:]
                                attachment.fallback = "See build log for more details"
                                attachment.title = "NAMEX-API pytests PASSED (maybe)! :blossom:"
                                attachment.color = "#00FF00" // lime green
                                notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                            } catch (Exception e) {
                                echo "EXCEPTION: ${e}"
                                def attachment = [:]
                                attachment.fallback = "See build log for more details"
                                attachment.title = "NAMEX-API pytests FAILED! :fire:"
                                attachment.color = "danger" // red
                                attachment.text = "- check logs in openshift for namex-api-pipeline build: ${BUILD_ID} for more info" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
                                notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                            }
                        }
                        dir('api/tests/postman') {

                            sh 'npm install newman'

                            try {
                                sh './node_modules/newman/bin/newman.js run ./namex-pipeline-dev.postman_collection.json --global-var NR=$DEV_API_TEST_NR --global-var userid=$DEV_API_TEST_USER --global-var password=$DEV_API_TEST_PASSWORD --global-var url="${BASEURL}" --global-var authurl=$DEV_API_TEST_AUTH_SERVER --global-var clientid=$DEV_API_TEST_CLIENT_ID --global-var client_secret=$DEV_API_TEST_CLIENT_SECRET --global-var realm=sbc -r cli,junit,html'
                                def attachment = [:]
                                attachment.fallback = "See build log for more details"
                                attachment.title = "NAMEX-API-DEV newman tests PASSED! :white_check_mark:"
                                attachment.color = "#00FF00" // lime green
                                notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                            } catch (Exception e) {
                                def attachment = [:]
                                attachment.fallback = "See build log for more details"
                                attachment.title = "NAMEX-API-DEV newman tests FAILED! :nauseated_face:"
                                attachment.color = "danger" // red
                                attachment.text = "- click _Results_ for more info" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
                                def results = [:]
                                results.type = "button"
                                results.text = "Results"
                                results.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/testReport/"
                                results.short = false
                                attachment.actions = [results]
                                notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                            }
                            input message: "is it grey yet?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-edit'
                            junit 'newman/*.xml'
                            publishHTML (target: [
                                        allowMissing: false,
                                        alwaysLinkToLastBuild: false,
                                        keepAll: true,
                                        reportDir: 'newman',
                                        reportFiles: 'newman*.html',
                                        reportName: "API Test Report"
                                    ])
                            stash includes: 'newman/*.xml', name: 'api-tests'
                            input message: "is it grey yet?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-edit'
                        } // end dir
                    } //end node
                } //end podTemplate
            } //end stage

        // Part 3 - Security scan of deployed app in dev

        // ensure pod labels/names are unique
        def zappodlabel = "myapp-zap-${UUID.randomUUID().toString()}"
        podTemplate(label: zappodlabel, name: zappodlabel, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
          containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '3Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
          )
        ]) {
             stage('ZAP Security Scan DEV') {
                node(zappodlabel) {
                  sleep 60
                  def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://namex-api-dev.pathfinder.gov.bc.ca/'
                  // publishHTML([allowMissing: false`, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                  echo "Return value is: ${retVal}"
                  def attachment = [:]
                  attachment.title = "NAMEX-API ready for DEPLOY to TEST"
                  attachment.color = "#ffff00" // yellow
                  def input = [:]
                  input.type = "button"
                  input.text = "Proceed/Abort?"
                  input.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/input"
                  input.short = false

                  attachment.actions = [input]
                  notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }
             }
          }

        // Part 4 - deploy to test
        stage('deploy-test') {
            def abort = false;
            try {
              timeout(time: 1, unit: 'DAYS') {
                  input message: "Deploy to test?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-edit'
              }
            } catch (Exception e) {
              abort = true;
            }
              node('master') {
                  if (abort) {
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API-TEST ABORTED :boom:"
                    attachment.color = "danger" // red
                    notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    echo ">>>> Deployment Aborted"
                    currentBuild.result = 'ABORTED'
                    error('Aborted')
                  } else {
                    echo ">>> Tag ${TST_TAG_NAME} with ${TST_BCK_TAG_NAME}"
                    openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: TST_BCK_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: TST_TAG_NAME
                    echo ">>> Tag ${IMAGE_HASH} with ${TST_TAG_NAME}"
                    openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: TST_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: "${IMAGE_HASH}"
                    sleep 5
                    openshiftVerifyDeployment depCfg: TST_DEPLOYMENT_NAME, namespace: TST_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                    echo ">>>> Deployment Complete"
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API successfully depoyed to TEST :rocket::rocket:"
                    attachment.color = "#00FF00" // Lime Green
                    notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                  }
              }
        }

        //Part 5 - Integration Testing API on test
        stage('API Test TEST') {
            //every time a change is made in pod template the name must be changed too
            podTemplate(label: 'nodejs-python3nodejs5.1', name: 'nodejs-python3nodejs5.1', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
            containerTemplate(
                name: 'jnlp',
                image: '172.50.0.2:5000/openshift/jenkins-slave-python3nodejs',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '1Gi',
                resourceLimitMemory: '2Gi',
                workingDir: '/tmp',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}',
                envVars: [
                    envVar(key:'BASEURL', value: "https://namex-test.pathfinder.gov.bc.ca"),
                    secretEnvVar(key: 'TEST_API_TEST_USER', secretName: 'apitest-secrets-test', secretKey: 'username'),
                    secretEnvVar(key: 'TEST_API_TEST_PASSWORD', secretName: 'apitest-secrets-test', secretKey: 'password'),
                    secretEnvVar(key: 'TEST_API_TEST_AUTH_SERVER', secretName: 'apitest-secrets-test', secretKey: 'authurl'),
                    secretEnvVar(key: 'TEST_API_TEST_CLIENT_ID', secretName: 'apitest-secrets-test', secretKey: 'clientid'),
                    secretEnvVar(key: 'TEST_API_TEST_CLIENT_SECRET', secretName: 'apitest-secrets-test', secretKey: 'client_secret'),
                    secretEnvVar(key: 'TEST_API_TEST_NR', secretName: 'apitest-secrets-test', secretKey: 'test_nr')
                ]
              )
            ])
            {
                node('nodejs-python3nodejs5.1') {
                //the checkout is mandatory, otherwise functional test would fail
                    echo "checking out source"
                    echo "Build: ${BUILD_ID}"
                    sh '''#!/bin/bash
                        echo BASEURL=$BASEURL
                        echo TEST_API_TEST_USER = $TEST_API_TEST_USER
                        echo TEST_API_TEST_AUTH_SERVER = $TEST_API_TEST_AUTH_SERVER
                        echo TEST_API_TEST_CLIENT_ID = $TEST_API_TEST_CLIENT_ID
                    '''
                    //input(message: "Verify Environment variables. Continue?")
                    checkout scm
                    dir('api/tests/postman') {

                        sh 'npm install newman'

                        try {
                            sh './node_modules/newman/bin/newman.js run ./namex-pipeline-test.postman_collection.json --global-var userid=$TEST_API_TEST_USER --global-var password=$TEST_API_TEST_PASSWORD --global-var url="${BASEURL}" --global-var authurl=$TEST_API_TEST_AUTH_SERVER --global-var clientid=$TEST_API_TEST_CLIENT_ID --global-var client_secret=$TEST_API_TEST_CLIENT_SECRET --global-var realm=sbc --global-var NR=$TEST_API_TEST_NR -r cli,junit,html'
                            def attachment = [:]
                            attachment.fallback = "See build log for more details"
                            attachment.title = "NAMEX-API-TEST newman tests PASSED! :white_check_mark: :white_check_mark:"
                            attachment.color = "#00FF00" // lime green
                            notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                        } catch (Exception e) {
                            def attachment = [:]
                            attachment.fallback = "See build log for more details"
                            attachment.title = "NAMEX-API-TEST newman tests FAILED! :nauseated_face: :nauseated_face:"
                            attachment.color = "danger" // red
                            attachment.text = "- click _Results_ for more info" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
                            def results = [:]
                            results.type = "button"
                            results.text = "Results"
                            results.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/testReport/"
                            attachment.actions = [results]
                            notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                        } finally {
                                junit 'newman/*.xml'
                                publishHTML (target: [
                                            allowMissing: false,
                                            alwaysLinkToLastBuild: false,
                                            keepAll: true,
                                            reportDir: 'newman',
                                            reportFiles: 'newman*.html',
                                            reportName: "API Test Report"
                                        ])
                                stash includes: 'newman/*.xml', name: 'api-tests'
                        }
                    } // end dir
                } //end node
            } //end podTemplate
        } //end stage

        // Part 6 - Security scan of deployed app in test

        // ensure pod labels/names are unique
        def zappodlabel2 = "myapp-zap-${UUID.randomUUID().toString()}"
        podTemplate(label: zappodlabel2, name: zappodlabel2, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
          containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '3Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
          )
        ]) {
             stage('ZAP Security Scan') {
                node(zappodlabel2) {
                  sleep 60
                  def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://namex-api-test.pathfinder.gov.bc.ca/'
                  // publishHTML([allowMissing: false`, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                  echo "Return value is: ${retVal}"
                  def attachment = [:]
                  attachment.title = "NAMEX-API ready for DEPLOY to PROD"
                  attachment.color = "#ffff00" // yellow
                  def input = [:]
                  input.type = "button"
                  input.text = "Proceed/Abort?"
                  input.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/input"
                  input.short = false

                  attachment.actions = [input]
                  notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }
             }
          }

        // Part 7 - deploy to prod
        stage('deploy-prod') {
            def abort = false;
            try {
              timeout(time: 1, unit: 'DAYS') {
                  input message: "Deploy to prod?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-edit'
              }
            } catch (Exception e) {
              abort = true;
            }
            node('master') {
              if (abort) {
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API-PROD ABORTED :boom::boom:"
                attachment.color = "danger" // red
                notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                echo ">>>> Deployment Aborted"
                currentBuild.result = 'ABORTED'
                error('Aborted')
              } else {
                 try {
                    echo ">>> Tag ${TST_TAG_NAME} with ${PROD_BCK_TAG_NAME}"
                    openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: PROD_BCK_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: PROD_TAG_NAME
                    echo ">>> Tag ${IMAGE_HASH} with ${PROD_TAG_NAME}"
                    openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: PROD_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: "${IMAGE_HASH}"
                    sleep 5
                    openshiftVerifyDeployment depCfg: PROD_DEPLOYMENT_NAME, namespace: PROD_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                    echo ">>>> Deployment Complete"
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API successfully deployed to PROD :tada::rocket::tada:"
                    attachment.color = "#00FF00" // Lime Green
                    notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    currentBuild.result='SUCCESS'
                 } catch (Exception e) {
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API failed deploying to PROD :boom::boom::boom:"
                    attachment.color = "danger" // red
                    notifySlack("namex-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    currentBuild.result='FAILURE'
                    error('Failure')
                 }
              }
            }
        }
    } else {
        // The changeSets did not contain any changes within the project's context directory.
        // Clearly indicate there were no changes.
        stage('No Changes') {
            // send msg to slack
            def attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "NAMEX-API build prevented because there were no changes"
            attachment.color = "#00FF00" // Lime Green
            attachment.text = "Changes applied to colin-api:\n" + getChangeString(CONTEXT_DIRECTORY) //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
            notifySlack("colin-api", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

            currentBuild.result = 'SUCCESS'
        }
    }
}