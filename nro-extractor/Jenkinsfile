//
// Copyright Â© 2018 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

//JENKINS DEPLOY ENVIRONMENT VARIABLES:
// - JENKINS_JAVA_OVERRIDES  -Dhudson.model.DirectoryBrowserSupport.CSP= -Duser.timezone=America/Vancouver
//   -> user.timezone : set the local timezone so logfiles report correxct time
//   -> hudson.model.DirectoryBrowserSupport.CSP : removes restrictions on CSS file load, thus html pages of test reports are displayed pretty
//   See: https://docs.openshift.com/container-platform/3.9/using_images/other_images/jenkins.html for a complete list of JENKINS env vars
// - SLACK_TOKEN

// define constants
def BUILDCFG_NAME ='nro-extractor'
def IMAGE_NAME = 'nro-extractor'
def DEV_DEPLOYMENT_NAME = 'nro-extractor-runtime'
def DEV_TAG_NAME = 'dev'
def DEV_NS = 'servicebc-ne-dev'
def TST_DEPLOYMENT_NAME = 'nro-extractor-runtime'
def TST_TAG_NAME = 'test'
def TST_BCK_TAG_NAME = 'test-previous'
def TST_NS = 'servicebc-ne-test'
def PROD_DEPLOYMENT_NAME = 'nro-extractor-runtime'
def PROD_TAG_NAME = 'prod'
def PROD_BCK_TAG_NAME = 'prod-previous'
def PROD_NS = 'servicebc-ne-prod'

def GIT_BRANCH_NAME = ("${env.JOB_BASE_NAME}".contains("master")) ? "master" : "develop"
def JENKINS_ICO = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
def OPENSHIFT_ICO = 'https://commons.wikimedia.org/wiki/File:OpenShift-LogoType.svg'


// define groovy functions

// send a msg to slack channel that deploy occured
import groovy.json.JsonOutput
def notifySlack(text, channel, url, attachments) {
    def slackURL = url
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "Jenkins",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])
    def encodedReq = URLEncoder.encode(payload, "UTF-8")
    sh("curl -s -S -X POST " +
            "--data \'payload=${encodedReq}\' ${slackURL}")    
}

// create a string listing commit msgs occured since last build
@NonCPS
def getChangeString() {
  MAX_MSG_LEN = 512
  def changeString = ""
  def changeLogSets = currentBuild.changeSets
  for (int i = 0; i < changeLogSets.size(); i++) {
     def entries = changeLogSets[i].items
     for (int j = 0; j < entries.length; j++) {
         def entry = entries[j]
         truncated_msg = entry.msg.take(MAX_MSG_LEN)
         changeString += " - ${truncated_msg} [${entry.author}]\n"
     }
  }
  if (!changeString) {
     changeString = "No changes"
  }
  return changeString
}

// pipeline

// Note: openshiftVerifyDeploy requires policy to be added:
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-dev
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-test
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-prod

// define job properties - keep 10 builds only
properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']]])

// Part 1 - CI - Source code scanning, build, dev deploy

podTemplate(label: 'py3nodejs', name: 'py3nodejs', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
containerTemplate(
    name: 'jnlp',
    image: '172.50.0.2:5000/openshift/jenkins-slave-py3nodejs',
    resourceRequestCpu: '500m',
    resourceLimitCpu: '1000m',
    resourceRequestMemory: '1Gi',
    resourceLimitMemory: '2Gi',
    workingDir: '/tmp',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}'
    )
])
{
    node('py3nodejs') {
    
    SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                returnStdout: true).trim()
            
        stage('checkout') {
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm
			GIT_COMMIT_SHORT_HASH = sh (
				script: """git describe --always""", returnStdout: true
				).trim()
			GIT_COMMIT_AUTHOR = sh (
				script: """git show -s --pretty=%an""", returnStdout: true
				).trim()
        }
        

//         stage('dependency check') {
//           dir('owasp') {
//             // content of 
//             // http://dl.bintray.com/jeremy-long/owasp/dependency-check-3.1.2-release.zip'
//             // expected in git repo in owasp/
//             sh './dependency-check/bin/dependency-check.sh --project "MyApp" --scan ../package.json --enableExperimental --enableRetired'
//             sh 'rm -rf ./dependency-check/data/'
//             publishHTML (target: [
//                                 allowMissing: false,
//                                 alwaysLinkToLastBuild: false,
//                                 keepAll: true,
//                                 reportDir: './',
//                                 reportFiles: 'dependency-check-report.html',
//                                 reportName: "OWASP Dependency Check Report"
//                           ])
//           }
//         }
        
//         stage('code quality check') {
//            SONARQUBE_URL = sh (
//                script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
//                returnStdout: true
//                   ).trim()
//            echo "SONARQUBE_URL: ${SONARQUBE_URL}"
//            dir('sonar-runner') {
//             sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info -Dsonar.projectName=Devex.Dev -Dsonar.branch=develop -Dsonar.projectKey=org.sonarqube:bcgov-devex-dev -Dsonar.sources=.."
//            }
//         }

		 stage('build') {
				echo "Building..."
				openshiftBuild bldCfg: BUILDCFG_NAME, verbose: 'false', showBuildLogs: 'true'
					sleep 5
				// openshiftVerifyBuild bldCfg: BUILDCFG_NAME
					echo ">>> Get Image Hash"
					IMAGE_HASH = sh (
					  script: """oc get istag ${IMAGE_NAME}:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
						returnStdout: true).trim()
					echo ">> IMAGE_HASH: ${IMAGE_HASH}"
				echo ">>>> Build Complete"
			}

        def attachment = [:]
        def message = "Another huge sucess; A freshly minted build is being deployed and will be available shortly."
        message = message + "\ncommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
        attachment.title = "API Build ${BUILD_ID} OK! :heart: :tada:"
        attachment.fallback = 'See build log for more details'
        attachment.color = '#00FF00' // Lime Green
        if( "master" != GIT_BRANCH_NAME.toLowerCase() ) {
          def action = [:]
          message = message + "\nThis image can be promoted to the *test* environment"
          action.type = "button"
          action.text = "Promote Image? :rocket:"
          action.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/devex-mpf-secure-tools/job/servicebc-ne-tools-nro-extractor-pipeline/${BUILD_ID}/input"
          attachment.actions = [action]
        }
        attachment.text = message

        notifySlack("${env.JOB_NAME}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment], JENKINS_ICO)
        
    }
}